# -*- coding: utf-8 -*-
"""Score_Analysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1kABDvYaG9aE_ABUJZ2y7e_bJeMjkU7Te
"""

!pip install pandas matplotlib openpyxl

# This program is divided into two blocks Block 1 & 2.
# Block 1 performs import of Libraries and define functions
# Block 2 Performs main application logic which shows mean, aggregation and plots graphs.
# Author: Surender Reddy, Student ID:

# BLOCK 1

import pandas as pd
import matplotlib.pyplot as plt
import statistics
import os

def get_player_data():
    """Gets player data from user input."""
    player_name = input("Enter player name: ")
    score = int(input("Enter player score: "))
    attempts = int(input("Enter number of attempts: "))
    return {"Player": player_name, "Score": score, "Attempts": attempts}

def write_to_excel(data, filename):
    """Writes player data to an Excel file, creating if not exists."""
    try:
        if os.path.exists(filename):
            df = pd.read_excel(filename)
            df = pd.concat([df, pd.DataFrame([data])], ignore_index=True)
        else:
            df = pd.DataFrame([data])
        df.to_excel(filename, index=False)
        print(f"Data appended to/created in {filename}")
    except Exception as e:
        print(f"An error occurred writing to Excel: {e}")

def read_from_excel(filename):
    """Reads player data from an Excel file."""
    if os.path.exists(filename):
        try:
            df = pd.read_excel(filename)
            return df
        except Exception as e:
            print(f"An error occurred reading from Excel: {e}")
            return None
    else:
        print(f"File {filename} not found.")
        return None

def analyze_data(df):
    """Performs statistical analysis on player data."""
    if df is None or df.empty:
        return None
    scores = df["Score"].tolist()
    attempts = df["Attempts"].tolist()

    analysis = {
        "mean_score": statistics.mean(scores),
        "median_score": statistics.median(scores),
        "stdev_score": statistics.stdev(scores) if len(scores) > 1 else 0,
        "mean_attempts": statistics.mean(attempts),
        "median_attempts": statistics.median(attempts),
        "stdev_attempts": statistics.stdev(attempts) if len(attempts) > 1 else 0,
    }
    return analysis

def display_results(df, analysis):
    """Displays statistical results and graphs."""
    if df is None or analysis is None:
        return

    print("\nStatistical Analysis:")
    for key, value in analysis.items():
        print(f"{key}: {value:.2f}")

    # Create graphs
    plt.figure(figsize=(12, 6))

    plt.subplot(1, 2, 1)
    plt.hist(df["Score"], bins=10, edgecolor="black")
    plt.title("Score Distribution")
    plt.xlabel("Score")
    plt.ylabel("Frequency")

    plt.subplot(1, 2, 2)
    plt.scatter(df["Attempts"], df["Score"])
    plt.title("Attempts vs. Score")
    plt.xlabel("Attempts")
    plt.ylabel("Score")

    plt.tight_layout()
    plt.show()

"""FOllowing is Excel Integration	Writes user input to an Excel file and reads data back successfully."""

# BLOCK 2

def main():
    """Main function to run the application."""
    filename = r"C:\Users\ngsre\Downloads\player_stats.xlsx" #raw string for windows path
    while True:
        print("\nOptions:")
        print("1. Enter Player Data")
        print("2. Analyze and Display Data")
        print("3. Exit")

        choice = input("Enter your choice: ")

        if choice == "1":
            player_data = get_player_data()
            write_to_excel(player_data, filename)
        elif choice == "2":
            data = read_from_excel(filename)
            if data is not None:
                analysis = analyze_data(data)
                if analysis is not None:
                    display_results(data, analysis)
                    break
        elif choice == "3":
            print("Exiting...")
            break
        else:
            print("Invalid choice. Please try again.")

if __name__ == "__main__":
    main()

